
syntax SQL (Query) {
## Query ::= "select" ("distinct" | "all")? SelectExpressions FromClause WhereClause GroupByClause HavingClause OrderByClause LimitClause
    QuerySelect : Query <- "select" SelectModifier SelectExpressions FromClause WhereClause GroupByClause HavingClause OrderByClause LimitClause

## SelectModifier ::= ("distinct" | "all")?
    SelectModifierEps      : SelectModifier <- eps
    SelectModifierDistinct : SelectModifier <- "distinct"
    SelectModifierAll      : SelectModifier <- "all_"

## SelectExpressions ::= SelectExpression ("," SelectExpression)*
    SelectExpressionsLast : SelectExpressions <- SelectExpression
    SelectExpressionsCons : SelectExpressions <- SelectExpression "comma" SelectExpressions

## SelectExpression ::= ("family(String)" ".")? "*" | Term ("as"? "alias(String)")?
    SelectExpressionAny    : SelectExpression <- FamilyName "asterisk"
    SelectExpressionTerm   : SelectExpression <- Term
    SelectExpressionTermAs : SelectExpression <- Term As "alias(std::string)"

## FamilyName ::= ("family(String)" ".")?
    FamilyNameEps    : FamilyName <- eps
    FamilyNameFamily : FamilyName <- "family(std::string)" "dot"

## As ::= "as"?
    AsEps : As <- eps
    AsAs  : As <- "as_"

## FromClause ::= "from" TableExpression ( "(" ColumnDefs ")" )?
    From               : FromClause <- "from_" TableExpression
    FromWithColumnDefs : FromClause <- "from_" TableExpression ColumnDefs

## TableExpression ::= ( SchemaName "." )? "table(String)" ("as"? TableAlias)?
    Table : TableExpression <- SchemaName "table(std::string)" TableAlias

## SchemaName ::= ("schema(String)" "dot")?
    SchemaNameEps    : SchemaName <- eps
    SchemaNameSchema : SchemaName <- "schema(std::string)" "dot"

## TableAlias ::= ("as"? "alias(String)")?
    TableAliasEps   : TableAlias <- eps
    TableAliasAlias : TableAlias <- As "alias(std::string)"

## ColumnDefs ::= ColumnDef ("," ColumnDef)*
    ColumnDefsLast : ColumnDefs <- ColumnDef
    ColumnDefsCons : ColumnDefs <- ColumnDef "comma" ColumnDefs

## ColumnDef ::= ColumnRef DataType ("not"? "null")? ("primary" "key" AscDesc)?
    ColumnDefinition : ColumnDef <- ColumnRef DataType Nullability PrimaryKey

## ColumnRef ::= ("family(String)" "dot")? "column(String)"
    Column : ColumnRef <- FamilyName "column(std::string)"

## DataType ::= "charType(Int)" | "integerType" | "booleanType" | "floatType" | "dateType" | ...
    CharType    : DataType <- "charType(int)"
    IntegerType : DataType <- "integerType"
    BooleanType : DataType <- "booleanType"
    FloatType   : DataType <- "floatType"
    DateType    : DataType <- "dateType"

## Nullability ::= ("not"? "null")?
    NullabilityEps     : Nullability <- eps
    NullabilityNull    : Nullability <- "null_"
    NullabilityNotNull : Nullability <- "not_" "null_"

## PrimaryKey ::= ("primary" "key" AscDesc)?
    PrimaryKeyEps            : PrimaryKey <- eps
    PrimaryKeyPrimaryKey     : PrimaryKey <- "primary" "key" AscDesc

## WhereClause ::= ("where" Expression)?
    WhereClauseEps   : WhereClause <- eps
    WhereClauseWhere : WhereClause <- "where_" Expression

## GroupByClause ::= ("group" "by" Expressions)?
    GroupByClauseEps     : GroupByClause <- eps
    GroupByClauseGroupBy : GroupByClause <- "group" "by" Expressions

## HavingClause ::= ("having" Expression)?
    HavingClauseEps    : HavingClause <- eps
    HavingClauseHaving : HavingClause <- "having" Expression

## OrderByClause ::= ("order" "by" Orders)?
    OrderByClauseEps     : OrderByClause <- eps
    OrderByClauseOrderBy : OrderByClause <- "order" "by" Orders

## Orders ::= Order ("comma" Order)*
    OrdersLast : Orders <- Order
    OrdersCons : Orders <- Order "comma" Orders

## Order ::= Expression ("asc" | "desc")? ("nulls" ("first" | "last"))?
    OrderOrder : Order <- Expression AscDesc Nulls

## AscDesc ::= ("asc" | "desc")?
    AscDescEps  : AscDesc <- eps
    AscDescAsc  : AscDesc <- "asc"
    AscDescDesc : AscDesc <- "desc"

## Nulls ::= ("nulls" ("first" | "last"))?
    NullsEps   : Nulls -> eps
    NullsFirst : Nulls -> "nulls" "first_"
    NullsLast  : Nulls -> "nulls" "last_"

## LimitClause ::= ("limit" (BindParameter | Number)?)?
    LimitClauseEps                : LimitClause <- eps
    LimitClauseLimitBindParameter : LimitClause <- "limit" BindParameter
    LimitClauseLimitNumber        : LimitClause <- "limit" Number

## Expressions ::= Expression ("," Expression)*
    ExpressionsLast : Expressions <- Expression
    ExpressionsCons : Expressions <- Expression "comma" Expressions

## Expression ::= AndCondition ("or" AndCondition)*
    ExpressionAndCondition : Expression <- AndCondition
    ExpressionOr           : Expression <- AndCondition "or_" Expression

## AndCondition ::= Condition ("and" Condition)*
    AndConditionCondition : AndCondition <- Condition
    AndConditionAnd       : AndCondition <- Condition "and_" AndCondition

## Condition ::= Operand (Compare Operand | InCondition | LikeCondition | BetweenCondition | IsNullCondition) | "not" Expression | "lp" Expression "rp"
    ConditionCompare          : Condition <- Operand Compare Operand
    ConditionInCondition      : Condition <- Operand InCondition
    ConditionLikeCondition    : Condition <- Operand LikeCondition
    ConditionBetweenCondition : Condition <- Operand BetweenCondition
    ConditionIsNullCondition  : Condition <- Operand IsNullCondition
    ConditionNotExpression    : Condition <- "not_" Expression
    ConditionParen            : Condition <- "lp" Expression "rp"

## Compare ::= "ne" | "le" | "ge" | "eq" | "lt" | "gt"
    CompareNE : Compare <- "ne"
    CompareLE : Compare <- "le"
    CompareGE : Compare <- "ge"
    CompareEQ : Compare <- "eq"
    CompareLT : Compare <- "lt"
    CompareGT : Compare <- "gt"

## InCondition ::= "not"? "in" "(" ConstantOperands ")"
    InConditionIn    : InCondition <- "in_" Operands
    InConditionNotIn : InCondition <- "not_" "in_" Operands

## LikeCondition ::= "not"? "like" Operand
    LikeConditionLike    : LikeCondition <- "like" Operand
    LikeConditionNotLike : LikeCondition <- "not_" "like" Operand

## BetweenCondition ::= "not"? "between" Operand "and" Operand
    BetweenConditionBetween    : BetweenCondition <- "between" Operand "and_" Operand
    BetweenConditionNotBetween : BetweenCondition <- "not_" "between" Operand "and_" Operand

## IsNullCondition ::= "is" "not"? "null"
    IsNullConditionIsNull    : IsNullCondition <- "is" "null_"
    IsNullConditionIsNotNull : IsNullCondition <- "is" "not_" "null_"

## Operands ::= Operand ("comma" Operand)*
    OperandsLast : Operands <- Operand
    OperandsCons : Operands <- Operand "comma" Operands

## Operand ::= Summand ("||" Summand)*
    OperandSummand : Operand <- Summand
    OperandAppend  : Operand <- Operand "append" Summand

## Summand ::= Factor (("+" | "-") Factor)*
    SummandFactor : Summand <- Factor
    SummandPlus   : Summand <- Summand "plus" Factor
    SummandMinus  : Summand <- Summand "minus" Factor

## Factor ::= Term (("*" | "/") Term)*
    FactorTerm    : Factor <- Term
    FactorTimes   : Factor <- Factor "times" Term
    FactorDivides : Factor <- Factor "divides" Term

## Term ::= Value | BindParameter | Function | Case | CaseWhen | "lp" Operand "rp" | ColumnRef | RowValueConstructor
    TermValue               : Term <- Value
    TermBindParameter       : Term <- BindParameter
##  (TermFunction            : Term <- Function)
    TermCase                : Term <- CaseClause
    TermCaseWhen            : Term <- CaseWhenClause
    TermParen               : Term <- "lp" Operand "rp"
    TermColumnRef           : Term <- ColumnRef
    TermRowValueConstructor : Term <- RowValueConstructor

## Value ::= "string(String)" | "boolean(Bool)" | "true" | "false" | Number | "null"
    ValueString  : Value <- "stringValue(std::string)"
    ValueBoolean : Value <- "booleanValue(bool)"
    ValueTrue    : Value <- "true_"
    ValueFalse   : Value <- "false_"
    ValueNumber  : Value <- Number
    ValueNull    : Value <- "null_"

## Number ::= "integer(Int)" | ...
    NumberInteger : Number <- "integer(int)"

## BindParameter ::= "?" | ":(Int)"
    BindParameterQuestion : BindParameter <- "question"
    BindParameterRef      : BindParameter <- "ref(int)"

## Function ::= ???

## CaseClause ::= "case" Term WhenClauses ElseClause "endCase"
    Case : CaseClause <- "case_" Term WhenClauses ElseClause "endCase"

## CaseWhenClause ::= "case" WhenClauses ElseClause "endCase"
    CaseWhen : CaseWhenClause <- "case_" WhenClauses ElseClause "endCase"

## WhenClauses ::= ("when" Expression "then" Term)+
    WhenClausesLast : WhenClauses <- WhenClause
    WhenClausesCons : WhenClauses <- WhenClause WhenClauses

## WhenClause ::= "when" Expression "then" Term
    When : WhenClause <- "when_" Expression "then_" Term

## ElseClause ::= ("else" Expression)?
    ElseClauseEps  : ElseClause <- eps
    ElseClauseElse : ElseClause <- "else_" Expression

## RowValueConstructor ::= "rawValue" Term "comma" Term ("comma" Term)* "endRawValue"
    RowValue : RowValueConstructor <- "rawValue" Term "comma" Terms "endRawValue"

## Terms ::= Term ("comma" Term)*
    TermsLast : Terms <- Term
    TermsCons : Terms <- Term "comma" Terms
}
